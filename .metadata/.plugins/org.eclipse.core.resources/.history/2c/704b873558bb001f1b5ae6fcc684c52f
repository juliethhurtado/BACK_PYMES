package co.edu.unicauca.sgph.horario.infrastructure.output.persistence.repository;

import java.time.LocalTime;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import co.edu.unicauca.sgph.common.enums.DiaSemanaEnum;
import co.edu.unicauca.sgph.curso.infrastructure.output.persistence.entity.CursoEntity;
import co.edu.unicauca.sgph.horario.infrastructure.input.DTOResponse.FranjaLibreOutDTO;
import co.edu.unicauca.sgph.horario.infrastructure.output.persistence.entity.HorarioEntity;

public interface HorarioRepositoryInt extends JpaRepository<HorarioEntity, Long> {
					    	
	public List<HorarioEntity> findByCurso(CursoEntity curso);
	
	@Query(value = "SELECT ef.id_espacio_fisico AS idEspacioFisico, " +
            "       d.dia AS dia, " +
            "       ADDTIME('07:00:00', SEC_TO_TIME(franja.num * 7200)) AS horaInicio, " +
            "       ADDTIME('07:00:00', SEC_TO_TIME((franja.num + 1) * 7200)) AS horaFin, " +
            "       ef.salon AS salon, " +
            "       ef.capacidad AS capacidad, " +
            "       te.tipo AS tipo, " +
            "       u.nombre AS ubicacion " +
            "FROM espacio_fisico ef " +
            "LEFT JOIN tipo_espacio_fisico te ON ef.id_tipo_espacio_fisico = te.id_tipo_espacio_fisico " +
            "LEFT JOIN ubicacion u ON ef.id_ubicacion = u.id_ubicacion, " +
            "(SELECT 0 AS num UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION " +
            " SELECT 5 UNION SELECT 6 UNION SELECT 7) AS franja, " +
            "(SELECT 'LUNES' AS dia UNION SELECT 'MARTES' UNION SELECT 'MIERCOLES' " +
            " UNION SELECT 'JUEVES' UNION SELECT 'VIERNES' UNION SELECT 'SABADO') AS d " +
            "WHERE (:idEspacioFisico IS NULL OR ef.id_espacio_fisico = :idEspacioFisico) " +
            "AND (:salon IS NULL OR LOWER(ef.salon) LIKE LOWER(CONCAT('%', :salon, '%'))) " +
            "AND (:ubicacion IS NULL OR ef.id_ubicacion IN :ubicacion) " +
            "AND (:horaInicio IS NULL OR ADDTIME('07:00:00', SEC_TO_TIME(franja.num * 7200)) >= :horaInicio) " +
            "AND (:horaFin IS NULL OR ADDTIME('07:00:00', SEC_TO_TIME((franja.num + 1) * 7200)) <= :horaFin) " +
            "AND (:dia IS NULL OR d.dia = :dia) " +
            "AND NOT (ADDTIME('07:00:00', SEC_TO_TIME(franja.num * 7200)) = '13:00:00') " +
            "AND NOT EXISTS (" +
            "    SELECT 1 " +
            "    FROM horario_espaciofisico he " +
            "    JOIN horario h ON he.id_horario = h.id_horario " +
            "    WHERE he.id_espacio_fisico = ef.id_espacio_fisico " +
            "    AND h.dia = d.dia " +
            "    AND ADDTIME('07:00:00', SEC_TO_TIME(franja.num * 7200)) < h.hora_fin " +
            "    AND ADDTIME('07:00:00', SEC_TO_TIME((franja.num + 1) * 7200)) > h.hora_inicio" +
            ")",
		    nativeQuery = true)
		Page<FranjaLibreOutDTO> filtrarFranjasLibres(
		 @Param("idEspacioFisico") Long idEspacioFisico,
		 @Param("dia") String dia, // Pasar el d√≠a como String
		 @Param("horaInicio") String horaInicio, // Hora inicio como String
		 @Param("horaFin") String horaFin, // Hora fin como String
		 @Param("salon") String salon,
		 @Param("ubicacion") List<Long> ubicacion,
		 Pageable pageable
		);


}
