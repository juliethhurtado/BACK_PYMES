package co.edu.unicauca.sgph.curso.infrastructure.input.mapper;

import co.edu.unicauca.sgph.asignatura.domain.model.Asignatura;
import co.edu.unicauca.sgph.curso.domain.model.Curso;
import co.edu.unicauca.sgph.curso.infrastructure.input.DTORequest.CursoInDTO;
import co.edu.unicauca.sgph.curso.infrastructure.input.DTOResponse.CursoOutDTO;
import co.edu.unicauca.sgph.facultad.domain.model.Facultad;
import co.edu.unicauca.sgph.periodoacademico.domain.model.PeriodoAcademico;
import co.edu.unicauca.sgph.programa.domain.model.Programa;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2024-12-26T16:49:03-0500",
    comments = "version: 1.5.5.Final, compiler: javac, environment: Java 17.0.7 (Eclipse Adoptium)"
)
@Component
public class CursoRestMapperImpl implements CursoRestMapper {

    @Override
    public CursoOutDTO toCursoOutDTO(Curso curso) {
        if ( curso == null ) {
            return null;
        }

        CursoOutDTO cursoOutDTO = new CursoOutDTO();

        cursoOutDTO.setIdAsignatura( cursoAsignaturaIdAsignatura( curso ) );
        cursoOutDTO.setIdPeriodoAcademico( cursoPeriodoAcademicoIdPeriodoAcademico( curso ) );
        cursoOutDTO.setIdPrograma( cursoAsignaturaProgramaIdPrograma( curso ) );
        cursoOutDTO.setIdFacultad( cursoAsignaturaProgramaFacultadIdFacultad( curso ) );
        cursoOutDTO.setNombreCurso( cursoAsignaturaNombre( curso ) );
        cursoOutDTO.setNombreFacultad( cursoAsignaturaProgramaFacultadNombre( curso ) );
        cursoOutDTO.setNombrePrograma( cursoAsignaturaProgramaNombre( curso ) );
        cursoOutDTO.setGrupo( curso.getGrupo() );
        Long anio = cursoPeriodoAcademicoAnio( curso );
        if ( anio != null ) {
            cursoOutDTO.setPeriodoAcademicoAnio( String.valueOf( anio ) );
        }
        cursoOutDTO.setOIDAsignatura( cursoAsignaturaOID( curso ) );
        Integer semestre = cursoAsignaturaSemestre( curso );
        if ( semestre != null ) {
            cursoOutDTO.setSemestre( semestre.longValue() );
        }
        Integer horasSemana = cursoAsignaturaHorasSemana( curso );
        if ( horasSemana != null ) {
            cursoOutDTO.setHoras( horasSemana.longValue() );
        }
        cursoOutDTO.setIdCurso( curso.getIdCurso() );
        cursoOutDTO.setCupo( curso.getCupo() );

        return cursoOutDTO;
    }

    @Override
    public Curso toCurso(CursoInDTO cursoInDTO) {
        if ( cursoInDTO == null ) {
            return null;
        }

        Curso curso = new Curso();

        curso.setIdCurso( cursoInDTO.getIdCurso() );
        curso.setGrupo( cursoInDTO.getGrupo() );
        curso.setCupo( cursoInDTO.getCupo() );

        curso.setAsignatura( new Asignatura(cursoInDTO.getIdAsignatura()) );

        return curso;
    }

    @Override
    public List<CursoOutDTO> toLstCursoOutDTO(List<Curso> lstCurso) {
        if ( lstCurso == null ) {
            return null;
        }

        List<CursoOutDTO> list = new ArrayList<CursoOutDTO>( lstCurso.size() );
        for ( Curso curso : lstCurso ) {
            list.add( toCursoOutDTO( curso ) );
        }

        return list;
    }

    private Long cursoAsignaturaIdAsignatura(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Long idAsignatura = asignatura.getIdAsignatura();
        if ( idAsignatura == null ) {
            return null;
        }
        return idAsignatura;
    }

    private Long cursoPeriodoAcademicoIdPeriodoAcademico(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        PeriodoAcademico periodoAcademico = curso.getPeriodoAcademico();
        if ( periodoAcademico == null ) {
            return null;
        }
        Long idPeriodoAcademico = periodoAcademico.getIdPeriodoAcademico();
        if ( idPeriodoAcademico == null ) {
            return null;
        }
        return idPeriodoAcademico;
    }

    private Long cursoAsignaturaProgramaIdPrograma(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Programa programa = asignatura.getPrograma();
        if ( programa == null ) {
            return null;
        }
        Long idPrograma = programa.getIdPrograma();
        if ( idPrograma == null ) {
            return null;
        }
        return idPrograma;
    }

    private Long cursoAsignaturaProgramaFacultadIdFacultad(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Programa programa = asignatura.getPrograma();
        if ( programa == null ) {
            return null;
        }
        Facultad facultad = programa.getFacultad();
        if ( facultad == null ) {
            return null;
        }
        Long idFacultad = facultad.getIdFacultad();
        if ( idFacultad == null ) {
            return null;
        }
        return idFacultad;
    }

    private String cursoAsignaturaNombre(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        String nombre = asignatura.getNombre();
        if ( nombre == null ) {
            return null;
        }
        return nombre;
    }

    private String cursoAsignaturaProgramaFacultadNombre(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Programa programa = asignatura.getPrograma();
        if ( programa == null ) {
            return null;
        }
        Facultad facultad = programa.getFacultad();
        if ( facultad == null ) {
            return null;
        }
        String nombre = facultad.getNombre();
        if ( nombre == null ) {
            return null;
        }
        return nombre;
    }

    private String cursoAsignaturaProgramaNombre(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Programa programa = asignatura.getPrograma();
        if ( programa == null ) {
            return null;
        }
        String nombre = programa.getNombre();
        if ( nombre == null ) {
            return null;
        }
        return nombre;
    }

    private Long cursoPeriodoAcademicoAnio(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        PeriodoAcademico periodoAcademico = curso.getPeriodoAcademico();
        if ( periodoAcademico == null ) {
            return null;
        }
        Long anio = periodoAcademico.getAnio();
        if ( anio == null ) {
            return null;
        }
        return anio;
    }

    private String cursoAsignaturaOID(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        String oID = asignatura.getOID();
        if ( oID == null ) {
            return null;
        }
        return oID;
    }

    private Integer cursoAsignaturaSemestre(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Integer semestre = asignatura.getSemestre();
        if ( semestre == null ) {
            return null;
        }
        return semestre;
    }

    private Integer cursoAsignaturaHorasSemana(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Integer horasSemana = asignatura.getHorasSemana();
        if ( horasSemana == null ) {
            return null;
        }
        return horasSemana;
    }
}
