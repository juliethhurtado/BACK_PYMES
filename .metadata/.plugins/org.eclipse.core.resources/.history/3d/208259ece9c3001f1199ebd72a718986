package co.edu.unicauca.sgph.programa.infrastructure.input.mapper;

import co.edu.unicauca.sgph.facultad.domain.model.Facultad;
import co.edu.unicauca.sgph.programa.domain.model.Programa;
import co.edu.unicauca.sgph.programa.infrastructure.input.DTORequest.ProgramaInDTO;
import co.edu.unicauca.sgph.programa.infrastructure.input.DTOResponse.ProgramaOutDTO;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2024-12-26T16:48:58-0500",
    comments = "version: 1.5.5.Final, compiler: javac, environment: Java 17.0.7 (Eclipse Adoptium)"
)
@Component
public class ProgramaRestMapperImpl implements ProgramaRestMapper {

    @Override
    public ProgramaOutDTO toProgramaOutDTO(Programa programa) {
        if ( programa == null ) {
            return null;
        }

        ProgramaOutDTO programaOutDTO = new ProgramaOutDTO();

        programaOutDTO.setIdFacultad( programaFacultadIdFacultad( programa ) );
        programaOutDTO.setIdPrograma( programa.getIdPrograma() );
        programaOutDTO.setNombre( programa.getNombre() );
        programaOutDTO.setAbreviatura( programa.getAbreviatura() );
        programaOutDTO.setOid( programa.getOid() );

        return programaOutDTO;
    }

    @Override
    public Programa toPrograma(ProgramaInDTO programaInDTO) {
        if ( programaInDTO == null ) {
            return null;
        }

        Programa programa = new Programa();

        programa.setIdPrograma( programaInDTO.getIdPrograma() );
        programa.setNombre( programaInDTO.getNombre() );
        programa.setAbreviatura( programaInDTO.getAbreviatura() );
        programa.setOid( programaInDTO.getOid() );

        programa.setFacultad( new Facultad(programaInDTO.getIdFacultad()) );

        return programa;
    }

    @Override
    public List<ProgramaOutDTO> toLstProgramaOutDTO(List<Programa> lstPrograma) {
        if ( lstPrograma == null ) {
            return null;
        }

        List<ProgramaOutDTO> list = new ArrayList<ProgramaOutDTO>( lstPrograma.size() );
        for ( Programa programa : lstPrograma ) {
            list.add( toProgramaOutDTO( programa ) );
        }

        return list;
    }

    private Long programaFacultadIdFacultad(Programa programa) {
        if ( programa == null ) {
            return null;
        }
        Facultad facultad = programa.getFacultad();
        if ( facultad == null ) {
            return null;
        }
        Long idFacultad = facultad.getIdFacultad();
        if ( idFacultad == null ) {
            return null;
        }
        return idFacultad;
    }
}
