package co.edu.unicauca.sgph.horario.infrastructure.input.mapper;

import co.edu.unicauca.sgph.curso.domain.model.Curso;
import co.edu.unicauca.sgph.horario.domain.model.Horario;
import co.edu.unicauca.sgph.horario.infrastructure.input.DTORequest.HorarioInDTO;
import co.edu.unicauca.sgph.horario.infrastructure.input.DTOResponse.HorarioOutDTO;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2024-12-26T16:48:59-0500",
    comments = "version: 1.5.5.Final, compiler: javac, environment: Java 17.0.7 (Eclipse Adoptium)"
)
@Component
public class HorarioRestMapperImpl implements HorarioRestMapper {

    @Override
    public HorarioOutDTO toHorarioOutDTO(Horario horario) {
        if ( horario == null ) {
            return null;
        }

        HorarioOutDTO horarioOutDTO = new HorarioOutDTO();

        horarioOutDTO.setIdCurso( horarioCursoIdCurso( horario ) );
        horarioOutDTO.setIdHorario( horario.getIdHorario() );
        horarioOutDTO.setDia( horario.getDia() );
        horarioOutDTO.setHoraInicio( horario.getHoraInicio() );
        horarioOutDTO.setHoraFin( horario.getHoraFin() );

        return horarioOutDTO;
    }

    @Override
    public Horario toHorario(HorarioInDTO horarioInDTO) {
        if ( horarioInDTO == null ) {
            return null;
        }

        Horario horario = new Horario();

        horario.setIdHorario( horarioInDTO.getIdHorario() );
        horario.setDia( horarioInDTO.getDia() );
        horario.setHoraInicio( horarioInDTO.getHoraInicio() );
        horario.setHoraFin( horarioInDTO.getHoraFin() );

        horario.setCurso( new Curso(horarioInDTO.getIdCurso()) );

        return horario;
    }

    @Override
    public List<HorarioOutDTO> toLstHorarioOutDTO(List<Horario> lstHorario) {
        if ( lstHorario == null ) {
            return null;
        }

        List<HorarioOutDTO> list = new ArrayList<HorarioOutDTO>( lstHorario.size() );
        for ( Horario horario : lstHorario ) {
            list.add( toHorarioOutDTO( horario ) );
        }

        return list;
    }

    private Long horarioCursoIdCurso(Horario horario) {
        if ( horario == null ) {
            return null;
        }
        Curso curso = horario.getCurso();
        if ( curso == null ) {
            return null;
        }
        Long idCurso = curso.getIdCurso();
        if ( idCurso == null ) {
            return null;
        }
        return idCurso;
    }
}
