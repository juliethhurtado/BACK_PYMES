package co.edu.unicauca.sgph.curso.infrastructure.input.mapper;

import co.edu.unicauca.sgph.agrupador.domain.model.AgrupadorEspacioFisico;
import co.edu.unicauca.sgph.agrupador.infrastructure.output.persistence.entity.AgrupadorEspacioFisicoEntity;
import co.edu.unicauca.sgph.asignatura.domain.model.Asignatura;
import co.edu.unicauca.sgph.asignatura.infrastructure.output.persistence.entity.AsignaturaEntity;
import co.edu.unicauca.sgph.curso.domain.model.Curso;
import co.edu.unicauca.sgph.curso.infrastructure.input.DTORequest.CursoInDTO;
import co.edu.unicauca.sgph.curso.infrastructure.input.DTOResponse.CursoOutDTO;
import co.edu.unicauca.sgph.curso.infrastructure.output.persistence.entity.CursoEntity;
import co.edu.unicauca.sgph.departamento.domain.model.Departamento;
import co.edu.unicauca.sgph.departamento.infrastructure.output.persistence.entity.DepartamentoEntity;
import co.edu.unicauca.sgph.docente.domain.model.Docente;
import co.edu.unicauca.sgph.docente.infrastructure.output.persistence.entity.DocenteEntity;
import co.edu.unicauca.sgph.espaciofisico.domain.model.Edificio;
import co.edu.unicauca.sgph.espaciofisico.domain.model.EspacioFisico;
import co.edu.unicauca.sgph.espaciofisico.domain.model.Municipio;
import co.edu.unicauca.sgph.espaciofisico.domain.model.RecursoEspacioFisico;
import co.edu.unicauca.sgph.espaciofisico.domain.model.RecursoFisico;
import co.edu.unicauca.sgph.espaciofisico.domain.model.TipoEspacioFisico;
import co.edu.unicauca.sgph.espaciofisico.domain.model.Ubicacion;
import co.edu.unicauca.sgph.espaciofisico.infrastructure.output.persistence.entity.EdificioEntity;
import co.edu.unicauca.sgph.espaciofisico.infrastructure.output.persistence.entity.EspacioFisicoEntity;
import co.edu.unicauca.sgph.espaciofisico.infrastructure.output.persistence.entity.MunicipioEntity;
import co.edu.unicauca.sgph.espaciofisico.infrastructure.output.persistence.entity.RecursoEspacioFisicoEntity;
import co.edu.unicauca.sgph.espaciofisico.infrastructure.output.persistence.entity.RecursoFisicoEntity;
import co.edu.unicauca.sgph.espaciofisico.infrastructure.output.persistence.entity.TipoEspacioFisicoEntity;
import co.edu.unicauca.sgph.espaciofisico.infrastructure.output.persistence.entity.UbicacionEntity;
import co.edu.unicauca.sgph.facultad.domain.model.Facultad;
import co.edu.unicauca.sgph.facultad.infrastructure.output.persistence.entity.FacultadEntity;
import co.edu.unicauca.sgph.horario.domain.model.Horario;
import co.edu.unicauca.sgph.horario.infrastructure.output.persistence.entity.HorarioEntity;
import co.edu.unicauca.sgph.periodoacademico.domain.model.PeriodoAcademico;
import co.edu.unicauca.sgph.periodoacademico.infrastructure.output.persistence.entity.PeriodoAcademicoEntity;
import co.edu.unicauca.sgph.persona.domain.model.Persona;
import co.edu.unicauca.sgph.persona.domain.model.TipoIdentificacion;
import co.edu.unicauca.sgph.persona.infrastructure.output.persistence.entity.PersonaEntity;
import co.edu.unicauca.sgph.persona.infrastructure.output.persistence.entity.TipoIdentificacionEntity;
import co.edu.unicauca.sgph.programa.domain.model.Programa;
import co.edu.unicauca.sgph.programa.infrastructure.output.persistence.entity.ProgramaEntity;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-08T12:25:08-0500",
    comments = "version: 1.5.5.Final, compiler: javac, environment: Java 17.0.7 (Eclipse Adoptium)"
)
@Component
public class CursoRestMapperImpl implements CursoRestMapper {

    @Override
    public CursoOutDTO toCursoOutDTO(Curso curso) {
        if ( curso == null ) {
            return null;
        }

        CursoOutDTO cursoOutDTO = new CursoOutDTO();

        cursoOutDTO.setIdAsignatura( cursoAsignaturaIdAsignatura( curso ) );
        cursoOutDTO.setIdPeriodoAcademico( cursoPeriodoAcademicoIdPeriodoAcademico( curso ) );
        cursoOutDTO.setIdPrograma( cursoAsignaturaProgramaIdPrograma( curso ) );
        cursoOutDTO.setIdFacultad( cursoAsignaturaProgramaFacultadIdFacultad( curso ) );
        cursoOutDTO.setNombreCurso( cursoAsignaturaNombre( curso ) );
        cursoOutDTO.setNombreFacultad( cursoAsignaturaProgramaFacultadNombre( curso ) );
        cursoOutDTO.setNombrePrograma( cursoAsignaturaProgramaNombre( curso ) );
        cursoOutDTO.setGrupo( curso.getGrupo() );
        Long anio = cursoPeriodoAcademicoAnio( curso );
        if ( anio != null ) {
            cursoOutDTO.setPeriodoAcademicoAnio( String.valueOf( anio ) );
        }
        cursoOutDTO.setOIDAsignatura( cursoAsignaturaOID( curso ) );
        Integer semestre = cursoAsignaturaSemestre( curso );
        if ( semestre != null ) {
            cursoOutDTO.setSemestre( semestre.longValue() );
        }
        Integer horasSemana = cursoAsignaturaHorasSemana( curso );
        if ( horasSemana != null ) {
            cursoOutDTO.setHoras( horasSemana.longValue() );
        }
        cursoOutDTO.setIdCurso( curso.getIdCurso() );
        cursoOutDTO.setCupo( curso.getCupo() );

        return cursoOutDTO;
    }

    @Override
    public CursoOutDTO toCursoOutDTOFromEntity(CursoEntity entity) {
        if ( entity == null ) {
            return null;
        }

        CursoOutDTO cursoOutDTO = new CursoOutDTO();

        cursoOutDTO.setIdAsignatura( entityAsignaturaIdAsignatura( entity ) );
        cursoOutDTO.setIdPeriodoAcademico( entityPeriodoAcademicoIdPeriodoAcademico( entity ) );
        cursoOutDTO.setIdPrograma( entityAsignaturaProgramaIdPrograma( entity ) );
        cursoOutDTO.setIdFacultad( entityAsignaturaProgramaFacultadIdFacultad( entity ) );
        cursoOutDTO.setNombreCurso( entityAsignaturaNombre( entity ) );
        cursoOutDTO.setNombreFacultad( entityAsignaturaProgramaFacultadNombre( entity ) );
        cursoOutDTO.setNombrePrograma( entityAsignaturaProgramaNombre( entity ) );
        cursoOutDTO.setGrupo( entity.getGrupo() );
        Long anio = entityPeriodoAcademicoAnio( entity );
        if ( anio != null ) {
            cursoOutDTO.setPeriodoAcademicoAnio( String.valueOf( anio ) );
        }
        cursoOutDTO.setOIDAsignatura( entityAsignaturaOid( entity ) );
        Integer semestre = entityAsignaturaSemestre( entity );
        if ( semestre != null ) {
            cursoOutDTO.setSemestre( semestre.longValue() );
        }
        Integer horasSemana = entityAsignaturaHorasSemana( entity );
        if ( horasSemana != null ) {
            cursoOutDTO.setHoras( horasSemana.longValue() );
        }
        cursoOutDTO.setCupo( entity.getCupo() );
        cursoOutDTO.setIdCurso( entity.getIdCurso() );

        return cursoOutDTO;
    }

    @Override
    public Curso toCurso(CursoInDTO cursoInDTO) {
        if ( cursoInDTO == null ) {
            return null;
        }

        Curso curso = new Curso();

        curso.setIdCurso( cursoInDTO.getIdCurso() );
        curso.setGrupo( cursoInDTO.getGrupo() );
        curso.setCupo( cursoInDTO.getCupo() );

        curso.setAsignatura( new Asignatura(cursoInDTO.getIdAsignatura()) );

        return curso;
    }

    @Override
    public List<CursoOutDTO> toLstCursoOutDTO(List<Curso> lstCurso) {
        if ( lstCurso == null ) {
            return null;
        }

        List<CursoOutDTO> list = new ArrayList<CursoOutDTO>( lstCurso.size() );
        for ( Curso curso : lstCurso ) {
            list.add( toCursoOutDTO( curso ) );
        }

        return list;
    }

    @Override
    public CursoEntity toCursoEntity(Curso curso) {
        if ( curso == null ) {
            return null;
        }

        CursoEntity cursoEntity = new CursoEntity();

        cursoEntity.setAsignatura( asignaturaToAsignaturaEntity( curso.getAsignatura() ) );
        cursoEntity.setGrupo( curso.getGrupo() );
        cursoEntity.setDocentes( docenteListToDocenteEntityList( curso.getDocentes() ) );
        cursoEntity.setCupo( curso.getCupo() );
        cursoEntity.setHorarios( horarioListToHorarioEntityList( curso.getHorarios() ) );
        cursoEntity.setPeriodoAcademico( periodoAcademicoToPeriodoAcademicoEntity( curso.getPeriodoAcademico() ) );

        return cursoEntity;
    }

    @Override
    public Curso toCursoFromEntity(CursoEntity entity) {
        if ( entity == null ) {
            return null;
        }

        Curso curso = new Curso();

        curso.setIdCurso( entity.getIdCurso() );
        curso.setGrupo( entity.getGrupo() );
        curso.setCupo( entity.getCupo() );
        curso.setAsignatura( asignaturaEntityToAsignatura( entity.getAsignatura() ) );
        curso.setDocentes( docenteEntityListToDocenteList( entity.getDocentes() ) );
        curso.setPeriodoAcademico( periodoAcademicoEntityToPeriodoAcademico( entity.getPeriodoAcademico() ) );
        curso.setHorarios( horarioEntityListToHorarioList( entity.getHorarios() ) );

        return curso;
    }

    @Override
    public void updateEntityFromCurso(Curso curso, CursoEntity entity) {
        if ( curso == null ) {
            return;
        }

        if ( curso.getAsignatura() != null ) {
            if ( entity.getAsignatura() == null ) {
                entity.setAsignatura( new AsignaturaEntity() );
            }
            asignaturaToAsignaturaEntity1( curso.getAsignatura(), entity.getAsignatura() );
        }
        else {
            entity.setAsignatura( null );
        }
        entity.setGrupo( curso.getGrupo() );
        if ( entity.getDocentes() != null ) {
            List<DocenteEntity> list = docenteListToDocenteEntityList( curso.getDocentes() );
            if ( list != null ) {
                entity.getDocentes().clear();
                entity.getDocentes().addAll( list );
            }
            else {
                entity.setDocentes( null );
            }
        }
        else {
            List<DocenteEntity> list = docenteListToDocenteEntityList( curso.getDocentes() );
            if ( list != null ) {
                entity.setDocentes( list );
            }
        }
        entity.setCupo( curso.getCupo() );
        if ( entity.getHorarios() != null ) {
            List<HorarioEntity> list1 = horarioListToHorarioEntityList( curso.getHorarios() );
            if ( list1 != null ) {
                entity.getHorarios().clear();
                entity.getHorarios().addAll( list1 );
            }
            else {
                entity.setHorarios( null );
            }
        }
        else {
            List<HorarioEntity> list1 = horarioListToHorarioEntityList( curso.getHorarios() );
            if ( list1 != null ) {
                entity.setHorarios( list1 );
            }
        }
    }

    private Long cursoAsignaturaIdAsignatura(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Long idAsignatura = asignatura.getIdAsignatura();
        if ( idAsignatura == null ) {
            return null;
        }
        return idAsignatura;
    }

    private Long cursoPeriodoAcademicoIdPeriodoAcademico(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        PeriodoAcademico periodoAcademico = curso.getPeriodoAcademico();
        if ( periodoAcademico == null ) {
            return null;
        }
        Long idPeriodoAcademico = periodoAcademico.getIdPeriodoAcademico();
        if ( idPeriodoAcademico == null ) {
            return null;
        }
        return idPeriodoAcademico;
    }

    private Long cursoAsignaturaProgramaIdPrograma(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Programa programa = asignatura.getPrograma();
        if ( programa == null ) {
            return null;
        }
        Long idPrograma = programa.getIdPrograma();
        if ( idPrograma == null ) {
            return null;
        }
        return idPrograma;
    }

    private Long cursoAsignaturaProgramaFacultadIdFacultad(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Programa programa = asignatura.getPrograma();
        if ( programa == null ) {
            return null;
        }
        Facultad facultad = programa.getFacultad();
        if ( facultad == null ) {
            return null;
        }
        Long idFacultad = facultad.getIdFacultad();
        if ( idFacultad == null ) {
            return null;
        }
        return idFacultad;
    }

    private String cursoAsignaturaNombre(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        String nombre = asignatura.getNombre();
        if ( nombre == null ) {
            return null;
        }
        return nombre;
    }

    private String cursoAsignaturaProgramaFacultadNombre(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Programa programa = asignatura.getPrograma();
        if ( programa == null ) {
            return null;
        }
        Facultad facultad = programa.getFacultad();
        if ( facultad == null ) {
            return null;
        }
        String nombre = facultad.getNombre();
        if ( nombre == null ) {
            return null;
        }
        return nombre;
    }

    private String cursoAsignaturaProgramaNombre(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Programa programa = asignatura.getPrograma();
        if ( programa == null ) {
            return null;
        }
        String nombre = programa.getNombre();
        if ( nombre == null ) {
            return null;
        }
        return nombre;
    }

    private Long cursoPeriodoAcademicoAnio(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        PeriodoAcademico periodoAcademico = curso.getPeriodoAcademico();
        if ( periodoAcademico == null ) {
            return null;
        }
        Long anio = periodoAcademico.getAnio();
        if ( anio == null ) {
            return null;
        }
        return anio;
    }

    private String cursoAsignaturaOID(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        String oID = asignatura.getOID();
        if ( oID == null ) {
            return null;
        }
        return oID;
    }

    private Integer cursoAsignaturaSemestre(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Integer semestre = asignatura.getSemestre();
        if ( semestre == null ) {
            return null;
        }
        return semestre;
    }

    private Integer cursoAsignaturaHorasSemana(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Integer horasSemana = asignatura.getHorasSemana();
        if ( horasSemana == null ) {
            return null;
        }
        return horasSemana;
    }

    private Long entityAsignaturaIdAsignatura(CursoEntity cursoEntity) {
        if ( cursoEntity == null ) {
            return null;
        }
        AsignaturaEntity asignatura = cursoEntity.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Long idAsignatura = asignatura.getIdAsignatura();
        if ( idAsignatura == null ) {
            return null;
        }
        return idAsignatura;
    }

    private Long entityPeriodoAcademicoIdPeriodoAcademico(CursoEntity cursoEntity) {
        if ( cursoEntity == null ) {
            return null;
        }
        PeriodoAcademicoEntity periodoAcademico = cursoEntity.getPeriodoAcademico();
        if ( periodoAcademico == null ) {
            return null;
        }
        Long idPeriodoAcademico = periodoAcademico.getIdPeriodoAcademico();
        if ( idPeriodoAcademico == null ) {
            return null;
        }
        return idPeriodoAcademico;
    }

    private Long entityAsignaturaProgramaIdPrograma(CursoEntity cursoEntity) {
        if ( cursoEntity == null ) {
            return null;
        }
        AsignaturaEntity asignatura = cursoEntity.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        ProgramaEntity programa = asignatura.getPrograma();
        if ( programa == null ) {
            return null;
        }
        Long idPrograma = programa.getIdPrograma();
        if ( idPrograma == null ) {
            return null;
        }
        return idPrograma;
    }

    private Long entityAsignaturaProgramaFacultadIdFacultad(CursoEntity cursoEntity) {
        if ( cursoEntity == null ) {
            return null;
        }
        AsignaturaEntity asignatura = cursoEntity.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        ProgramaEntity programa = asignatura.getPrograma();
        if ( programa == null ) {
            return null;
        }
        FacultadEntity facultad = programa.getFacultad();
        if ( facultad == null ) {
            return null;
        }
        Long idFacultad = facultad.getIdFacultad();
        if ( idFacultad == null ) {
            return null;
        }
        return idFacultad;
    }

    private String entityAsignaturaNombre(CursoEntity cursoEntity) {
        if ( cursoEntity == null ) {
            return null;
        }
        AsignaturaEntity asignatura = cursoEntity.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        String nombre = asignatura.getNombre();
        if ( nombre == null ) {
            return null;
        }
        return nombre;
    }

    private String entityAsignaturaProgramaFacultadNombre(CursoEntity cursoEntity) {
        if ( cursoEntity == null ) {
            return null;
        }
        AsignaturaEntity asignatura = cursoEntity.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        ProgramaEntity programa = asignatura.getPrograma();
        if ( programa == null ) {
            return null;
        }
        FacultadEntity facultad = programa.getFacultad();
        if ( facultad == null ) {
            return null;
        }
        String nombre = facultad.getNombre();
        if ( nombre == null ) {
            return null;
        }
        return nombre;
    }

    private String entityAsignaturaProgramaNombre(CursoEntity cursoEntity) {
        if ( cursoEntity == null ) {
            return null;
        }
        AsignaturaEntity asignatura = cursoEntity.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        ProgramaEntity programa = asignatura.getPrograma();
        if ( programa == null ) {
            return null;
        }
        String nombre = programa.getNombre();
        if ( nombre == null ) {
            return null;
        }
        return nombre;
    }

    private Long entityPeriodoAcademicoAnio(CursoEntity cursoEntity) {
        if ( cursoEntity == null ) {
            return null;
        }
        PeriodoAcademicoEntity periodoAcademico = cursoEntity.getPeriodoAcademico();
        if ( periodoAcademico == null ) {
            return null;
        }
        Long anio = periodoAcademico.getAnio();
        if ( anio == null ) {
            return null;
        }
        return anio;
    }

    private String entityAsignaturaOid(CursoEntity cursoEntity) {
        if ( cursoEntity == null ) {
            return null;
        }
        AsignaturaEntity asignatura = cursoEntity.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        String oid = asignatura.getOid();
        if ( oid == null ) {
            return null;
        }
        return oid;
    }

    private Integer entityAsignaturaSemestre(CursoEntity cursoEntity) {
        if ( cursoEntity == null ) {
            return null;
        }
        AsignaturaEntity asignatura = cursoEntity.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Integer semestre = asignatura.getSemestre();
        if ( semestre == null ) {
            return null;
        }
        return semestre;
    }

    private Integer entityAsignaturaHorasSemana(CursoEntity cursoEntity) {
        if ( cursoEntity == null ) {
            return null;
        }
        AsignaturaEntity asignatura = cursoEntity.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Integer horasSemana = asignatura.getHorasSemana();
        if ( horasSemana == null ) {
            return null;
        }
        return horasSemana;
    }

    protected FacultadEntity facultadToFacultadEntity(Facultad facultad) {
        if ( facultad == null ) {
            return null;
        }

        FacultadEntity facultadEntity = new FacultadEntity();

        facultadEntity.setIdFacultad( facultad.getIdFacultad() );
        facultadEntity.setNombre( facultad.getNombre() );
        facultadEntity.setAbreviatura( facultad.getAbreviatura() );

        return facultadEntity;
    }

    protected ProgramaEntity programaToProgramaEntity(Programa programa) {
        if ( programa == null ) {
            return null;
        }

        ProgramaEntity programaEntity = new ProgramaEntity();

        programaEntity.setIdPrograma( programa.getIdPrograma() );
        programaEntity.setNombre( programa.getNombre() );
        programaEntity.setAbreviatura( programa.getAbreviatura() );
        programaEntity.setFacultad( facultadToFacultadEntity( programa.getFacultad() ) );
        if ( programa.getOid() != null ) {
            programaEntity.setOid( String.valueOf( programa.getOid() ) );
        }

        return programaEntity;
    }

    protected AgrupadorEspacioFisicoEntity agrupadorEspacioFisicoToAgrupadorEspacioFisicoEntity(AgrupadorEspacioFisico agrupadorEspacioFisico) {
        if ( agrupadorEspacioFisico == null ) {
            return null;
        }

        AgrupadorEspacioFisicoEntity agrupadorEspacioFisicoEntity = new AgrupadorEspacioFisicoEntity();

        agrupadorEspacioFisicoEntity.setIdAgrupadorEspacioFisico( agrupadorEspacioFisico.getIdAgrupadorEspacioFisico() );
        agrupadorEspacioFisicoEntity.setNombre( agrupadorEspacioFisico.getNombre() );
        agrupadorEspacioFisicoEntity.setObservacion( agrupadorEspacioFisico.getObservacion() );
        agrupadorEspacioFisicoEntity.setFacultad( facultadToFacultadEntity( agrupadorEspacioFisico.getFacultad() ) );

        return agrupadorEspacioFisicoEntity;
    }

    protected List<AgrupadorEspacioFisicoEntity> agrupadorEspacioFisicoListToAgrupadorEspacioFisicoEntityList(List<AgrupadorEspacioFisico> list) {
        if ( list == null ) {
            return null;
        }

        List<AgrupadorEspacioFisicoEntity> list1 = new ArrayList<AgrupadorEspacioFisicoEntity>( list.size() );
        for ( AgrupadorEspacioFisico agrupadorEspacioFisico : list ) {
            list1.add( agrupadorEspacioFisicoToAgrupadorEspacioFisicoEntity( agrupadorEspacioFisico ) );
        }

        return list1;
    }

    protected AsignaturaEntity asignaturaToAsignaturaEntity(Asignatura asignatura) {
        if ( asignatura == null ) {
            return null;
        }

        AsignaturaEntity asignaturaEntity = new AsignaturaEntity();

        asignaturaEntity.setIdAsignatura( asignatura.getIdAsignatura() );
        asignaturaEntity.setNombre( asignatura.getNombre() );
        asignaturaEntity.setCodigoAsignatura( asignatura.getCodigoAsignatura() );
        asignaturaEntity.setSemestre( asignatura.getSemestre() );
        asignaturaEntity.setPensum( asignatura.getPensum() );
        asignaturaEntity.setHorasSemana( asignatura.getHorasSemana() );
        asignaturaEntity.setPrograma( programaToProgramaEntity( asignatura.getPrograma() ) );
        asignaturaEntity.setAgrupadores( agrupadorEspacioFisicoListToAgrupadorEspacioFisicoEntityList( asignatura.getAgrupadores() ) );
        asignaturaEntity.setAplicaEspacioSecundario( asignatura.getAplicaEspacioSecundario() );

        return asignaturaEntity;
    }

    protected List<CursoEntity> cursoListToCursoEntityList(List<Curso> list) {
        if ( list == null ) {
            return null;
        }

        List<CursoEntity> list1 = new ArrayList<CursoEntity>( list.size() );
        for ( Curso curso : list ) {
            list1.add( toCursoEntity( curso ) );
        }

        return list1;
    }

    protected DepartamentoEntity departamentoToDepartamentoEntity(Departamento departamento) {
        if ( departamento == null ) {
            return null;
        }

        DepartamentoEntity departamentoEntity = new DepartamentoEntity();

        departamentoEntity.setIdDepartamento( departamento.getIdDepartamento() );
        departamentoEntity.setNombre( departamento.getNombre() );
        departamentoEntity.setFacultad( facultadToFacultadEntity( departamento.getFacultad() ) );
        if ( departamento.getOid() != null ) {
            departamentoEntity.setOid( String.valueOf( departamento.getOid() ) );
        }

        return departamentoEntity;
    }

    protected TipoIdentificacionEntity tipoIdentificacionToTipoIdentificacionEntity(TipoIdentificacion tipoIdentificacion) {
        if ( tipoIdentificacion == null ) {
            return null;
        }

        TipoIdentificacionEntity tipoIdentificacionEntity = new TipoIdentificacionEntity();

        tipoIdentificacionEntity.setIdTipoIdentificacion( tipoIdentificacion.getIdTipoIdentificacion() );
        tipoIdentificacionEntity.setCodigoTipoIdentificacion( tipoIdentificacion.getCodigoTipoIdentificacion() );
        tipoIdentificacionEntity.setTipoIdentificacion( tipoIdentificacion.getTipoIdentificacion() );

        return tipoIdentificacionEntity;
    }

    protected PersonaEntity personaToPersonaEntity(Persona persona) {
        if ( persona == null ) {
            return null;
        }

        PersonaEntity personaEntity = new PersonaEntity();

        personaEntity.setIdPersona( persona.getIdPersona() );
        personaEntity.setTipoIdentificacion( tipoIdentificacionToTipoIdentificacionEntity( persona.getTipoIdentificacion() ) );
        personaEntity.setNumeroIdentificacion( persona.getNumeroIdentificacion() );
        personaEntity.setPrimerNombre( persona.getPrimerNombre() );
        personaEntity.setSegundoNombre( persona.getSegundoNombre() );
        personaEntity.setPrimerApellido( persona.getPrimerApellido() );
        personaEntity.setSegundoApellido( persona.getSegundoApellido() );
        personaEntity.setEmail( persona.getEmail() );
        personaEntity.setSinReferencia( persona.getSinReferencia() );

        return personaEntity;
    }

    protected DocenteEntity docenteToDocenteEntity(Docente docente) {
        if ( docente == null ) {
            return null;
        }

        DocenteEntity docenteEntity = new DocenteEntity();

        docenteEntity.setIdDocente( docente.getIdDocente() );
        docenteEntity.setCursos( cursoListToCursoEntityList( docente.getCursos() ) );
        docenteEntity.setCodigo( docente.getCodigo() );
        docenteEntity.setEstado( docente.getEstado() );
        docenteEntity.setDepartamento( departamentoToDepartamentoEntity( docente.getDepartamento() ) );
        docenteEntity.setPersona( personaToPersonaEntity( docente.getPersona() ) );

        return docenteEntity;
    }

    protected List<DocenteEntity> docenteListToDocenteEntityList(List<Docente> list) {
        if ( list == null ) {
            return null;
        }

        List<DocenteEntity> list1 = new ArrayList<DocenteEntity>( list.size() );
        for ( Docente docente : list ) {
            list1.add( docenteToDocenteEntity( docente ) );
        }

        return list1;
    }

    protected TipoEspacioFisicoEntity tipoEspacioFisicoToTipoEspacioFisicoEntity(TipoEspacioFisico tipoEspacioFisico) {
        if ( tipoEspacioFisico == null ) {
            return null;
        }

        TipoEspacioFisicoEntity tipoEspacioFisicoEntity = new TipoEspacioFisicoEntity();

        tipoEspacioFisicoEntity.setIdTipoEspacioFisico( tipoEspacioFisico.getIdTipoEspacioFisico() );
        tipoEspacioFisicoEntity.setTipo( tipoEspacioFisico.getTipo() );
        tipoEspacioFisicoEntity.setObservacion( tipoEspacioFisico.getObservacion() );

        return tipoEspacioFisicoEntity;
    }

    protected List<HorarioEntity> horarioListToHorarioEntityList(List<Horario> list) {
        if ( list == null ) {
            return null;
        }

        List<HorarioEntity> list1 = new ArrayList<HorarioEntity>( list.size() );
        for ( Horario horario : list ) {
            list1.add( horarioToHorarioEntity( horario ) );
        }

        return list1;
    }

    protected RecursoFisicoEntity recursoFisicoToRecursoFisicoEntity(RecursoFisico recursoFisico) {
        if ( recursoFisico == null ) {
            return null;
        }

        RecursoFisicoEntity recursoFisicoEntity = new RecursoFisicoEntity();

        recursoFisicoEntity.setIdRecursoFisico( recursoFisico.getIdRecursoFisico() );
        recursoFisicoEntity.setNombre( recursoFisico.getNombre() );
        recursoFisicoEntity.setDescripcion( recursoFisico.getDescripcion() );

        return recursoFisicoEntity;
    }

    protected RecursoEspacioFisicoEntity recursoEspacioFisicoToRecursoEspacioFisicoEntity(RecursoEspacioFisico recursoEspacioFisico) {
        if ( recursoEspacioFisico == null ) {
            return null;
        }

        RecursoEspacioFisicoEntity recursoEspacioFisicoEntity = new RecursoEspacioFisicoEntity();

        recursoEspacioFisicoEntity.setEspacioFisico( espacioFisicoToEspacioFisicoEntity( recursoEspacioFisico.getEspacioFisico() ) );
        recursoEspacioFisicoEntity.setRecursoFisico( recursoFisicoToRecursoFisicoEntity( recursoEspacioFisico.getRecursoFisico() ) );
        recursoEspacioFisicoEntity.setCantidad( recursoEspacioFisico.getCantidad() );
        recursoEspacioFisicoEntity.setIdRecursoEspacioFisico( recursoEspacioFisico.getIdRecursoEspacioFisico() );

        return recursoEspacioFisicoEntity;
    }

    protected List<RecursoEspacioFisicoEntity> recursoEspacioFisicoListToRecursoEspacioFisicoEntityList(List<RecursoEspacioFisico> list) {
        if ( list == null ) {
            return null;
        }

        List<RecursoEspacioFisicoEntity> list1 = new ArrayList<RecursoEspacioFisicoEntity>( list.size() );
        for ( RecursoEspacioFisico recursoEspacioFisico : list ) {
            list1.add( recursoEspacioFisicoToRecursoEspacioFisicoEntity( recursoEspacioFisico ) );
        }

        return list1;
    }

    protected MunicipioEntity municipioToMunicipioEntity(Municipio municipio) {
        if ( municipio == null ) {
            return null;
        }

        MunicipioEntity municipioEntity = new MunicipioEntity();

        municipioEntity.setIdMunicipio( municipio.getIdMunicipio() );
        municipioEntity.setNombre( municipio.getNombre() );

        return municipioEntity;
    }

    protected UbicacionEntity ubicacionToUbicacionEntity(Ubicacion ubicacion) {
        if ( ubicacion == null ) {
            return null;
        }

        UbicacionEntity ubicacionEntity = new UbicacionEntity();

        ubicacionEntity.setIdUbicacion( ubicacion.getIdUbicacion() );
        ubicacionEntity.setNombre( ubicacion.getNombre() );
        ubicacionEntity.setDescripcion( ubicacion.getDescripcion() );
        ubicacionEntity.setMunicipio( municipioToMunicipioEntity( ubicacion.getMunicipio() ) );

        return ubicacionEntity;
    }

    protected EdificioEntity edificioToEdificioEntity(Edificio edificio) {
        if ( edificio == null ) {
            return null;
        }

        EdificioEntity edificioEntity = new EdificioEntity();

        edificioEntity.setIdEdificio( edificio.getIdEdificio() );
        edificioEntity.setNombre( edificio.getNombre() );
        edificioEntity.setDescripcion( edificio.getDescripcion() );

        return edificioEntity;
    }

    protected EspacioFisicoEntity espacioFisicoToEspacioFisicoEntity(EspacioFisico espacioFisico) {
        if ( espacioFisico == null ) {
            return null;
        }

        EspacioFisicoEntity espacioFisicoEntity = new EspacioFisicoEntity();

        espacioFisicoEntity.setCapacidad( espacioFisico.getCapacidad() );
        espacioFisicoEntity.setEstado( espacioFisico.getEstado() );
        espacioFisicoEntity.setIdEspacioFisico( espacioFisico.getIdEspacioFisico() );
        espacioFisicoEntity.setTipoEspacioFisico( tipoEspacioFisicoToTipoEspacioFisicoEntity( espacioFisico.getTipoEspacioFisico() ) );
        espacioFisicoEntity.setSalon( espacioFisico.getSalon() );
        espacioFisicoEntity.setHorarios( horarioListToHorarioEntityList( espacioFisico.getHorarios() ) );
        espacioFisicoEntity.setRecursosEspacioFisico( recursoEspacioFisicoListToRecursoEspacioFisicoEntityList( espacioFisico.getRecursosEspacioFisico() ) );
        espacioFisicoEntity.setUbicacion( ubicacionToUbicacionEntity( espacioFisico.getUbicacion() ) );
        espacioFisicoEntity.setEdificio( edificioToEdificioEntity( espacioFisico.getEdificio() ) );
        espacioFisicoEntity.setAgrupadores( agrupadorEspacioFisicoListToAgrupadorEspacioFisicoEntityList( espacioFisico.getAgrupadores() ) );

        return espacioFisicoEntity;
    }

    protected List<EspacioFisicoEntity> espacioFisicoListToEspacioFisicoEntityList(List<EspacioFisico> list) {
        if ( list == null ) {
            return null;
        }

        List<EspacioFisicoEntity> list1 = new ArrayList<EspacioFisicoEntity>( list.size() );
        for ( EspacioFisico espacioFisico : list ) {
            list1.add( espacioFisicoToEspacioFisicoEntity( espacioFisico ) );
        }

        return list1;
    }

    protected HorarioEntity horarioToHorarioEntity(Horario horario) {
        if ( horario == null ) {
            return null;
        }

        HorarioEntity horarioEntity = new HorarioEntity();

        horarioEntity.setIdHorario( horario.getIdHorario() );
        horarioEntity.setDia( horario.getDia() );
        horarioEntity.setHoraInicio( horario.getHoraInicio() );
        horarioEntity.setHoraFin( horario.getHoraFin() );
        horarioEntity.setCurso( toCursoEntity( horario.getCurso() ) );
        horarioEntity.setEspaciosFisicos( espacioFisicoListToEspacioFisicoEntityList( horario.getEspaciosFisicos() ) );

        return horarioEntity;
    }

    protected PeriodoAcademicoEntity periodoAcademicoToPeriodoAcademicoEntity(PeriodoAcademico periodoAcademico) {
        if ( periodoAcademico == null ) {
            return null;
        }

        PeriodoAcademicoEntity periodoAcademicoEntity = new PeriodoAcademicoEntity();

        periodoAcademicoEntity.setIdPeriodoAcademico( periodoAcademico.getIdPeriodoAcademico() );
        periodoAcademicoEntity.setAnio( periodoAcademico.getAnio() );
        periodoAcademicoEntity.setPeriodo( periodoAcademico.getPeriodo() );
        periodoAcademicoEntity.setFechaInicioPeriodo( periodoAcademico.getFechaInicioPeriodo() );
        periodoAcademicoEntity.setFechaFinPeriodo( periodoAcademico.getFechaFinPeriodo() );
        periodoAcademicoEntity.setEstado( periodoAcademico.getEstado() );

        return periodoAcademicoEntity;
    }

    protected Facultad facultadEntityToFacultad(FacultadEntity facultadEntity) {
        if ( facultadEntity == null ) {
            return null;
        }

        Facultad facultad = new Facultad();

        facultad.setIdFacultad( facultadEntity.getIdFacultad() );
        facultad.setNombre( facultadEntity.getNombre() );
        facultad.setAbreviatura( facultadEntity.getAbreviatura() );

        return facultad;
    }

    protected List<Asignatura> asignaturaEntityListToAsignaturaList(List<AsignaturaEntity> list) {
        if ( list == null ) {
            return null;
        }

        List<Asignatura> list1 = new ArrayList<Asignatura>( list.size() );
        for ( AsignaturaEntity asignaturaEntity : list ) {
            list1.add( asignaturaEntityToAsignatura( asignaturaEntity ) );
        }

        return list1;
    }

    protected Programa programaEntityToPrograma(ProgramaEntity programaEntity) {
        if ( programaEntity == null ) {
            return null;
        }

        Programa programa = new Programa();

        programa.setIdPrograma( programaEntity.getIdPrograma() );
        programa.setNombre( programaEntity.getNombre() );
        programa.setAbreviatura( programaEntity.getAbreviatura() );
        programa.setFacultad( facultadEntityToFacultad( programaEntity.getFacultad() ) );
        programa.setAsignaturas( asignaturaEntityListToAsignaturaList( programaEntity.getAsignaturas() ) );
        if ( programaEntity.getOid() != null ) {
            programa.setOid( Long.parseLong( programaEntity.getOid() ) );
        }

        return programa;
    }

    protected AgrupadorEspacioFisico agrupadorEspacioFisicoEntityToAgrupadorEspacioFisico(AgrupadorEspacioFisicoEntity agrupadorEspacioFisicoEntity) {
        if ( agrupadorEspacioFisicoEntity == null ) {
            return null;
        }

        AgrupadorEspacioFisico agrupadorEspacioFisico = new AgrupadorEspacioFisico();

        agrupadorEspacioFisico.setIdAgrupadorEspacioFisico( agrupadorEspacioFisicoEntity.getIdAgrupadorEspacioFisico() );
        agrupadorEspacioFisico.setNombre( agrupadorEspacioFisicoEntity.getNombre() );
        agrupadorEspacioFisico.setObservacion( agrupadorEspacioFisicoEntity.getObservacion() );
        agrupadorEspacioFisico.setFacultad( facultadEntityToFacultad( agrupadorEspacioFisicoEntity.getFacultad() ) );

        return agrupadorEspacioFisico;
    }

    protected List<AgrupadorEspacioFisico> agrupadorEspacioFisicoEntityListToAgrupadorEspacioFisicoList(List<AgrupadorEspacioFisicoEntity> list) {
        if ( list == null ) {
            return null;
        }

        List<AgrupadorEspacioFisico> list1 = new ArrayList<AgrupadorEspacioFisico>( list.size() );
        for ( AgrupadorEspacioFisicoEntity agrupadorEspacioFisicoEntity : list ) {
            list1.add( agrupadorEspacioFisicoEntityToAgrupadorEspacioFisico( agrupadorEspacioFisicoEntity ) );
        }

        return list1;
    }

    protected Asignatura asignaturaEntityToAsignatura(AsignaturaEntity asignaturaEntity) {
        if ( asignaturaEntity == null ) {
            return null;
        }

        Asignatura asignatura = new Asignatura();

        asignatura.setIdAsignatura( asignaturaEntity.getIdAsignatura() );
        asignatura.setNombre( asignaturaEntity.getNombre() );
        asignatura.setCodigoAsignatura( asignaturaEntity.getCodigoAsignatura() );
        asignatura.setSemestre( asignaturaEntity.getSemestre() );
        asignatura.setPensum( asignaturaEntity.getPensum() );
        asignatura.setHorasSemana( asignaturaEntity.getHorasSemana() );
        asignatura.setPrograma( programaEntityToPrograma( asignaturaEntity.getPrograma() ) );
        asignatura.setAgrupadores( agrupadorEspacioFisicoEntityListToAgrupadorEspacioFisicoList( asignaturaEntity.getAgrupadores() ) );
        asignatura.setAplicaEspacioSecundario( asignaturaEntity.getAplicaEspacioSecundario() );

        return asignatura;
    }

    protected List<Curso> cursoEntityListToCursoList(List<CursoEntity> list) {
        if ( list == null ) {
            return null;
        }

        List<Curso> list1 = new ArrayList<Curso>( list.size() );
        for ( CursoEntity cursoEntity : list ) {
            list1.add( toCursoFromEntity( cursoEntity ) );
        }

        return list1;
    }

    protected Departamento departamentoEntityToDepartamento(DepartamentoEntity departamentoEntity) {
        if ( departamentoEntity == null ) {
            return null;
        }

        Departamento departamento = new Departamento();

        departamento.setIdDepartamento( departamentoEntity.getIdDepartamento() );
        departamento.setNombre( departamentoEntity.getNombre() );
        departamento.setFacultad( facultadEntityToFacultad( departamentoEntity.getFacultad() ) );
        if ( departamentoEntity.getOid() != null ) {
            departamento.setOid( Long.parseLong( departamentoEntity.getOid() ) );
        }

        return departamento;
    }

    protected TipoIdentificacion tipoIdentificacionEntityToTipoIdentificacion(TipoIdentificacionEntity tipoIdentificacionEntity) {
        if ( tipoIdentificacionEntity == null ) {
            return null;
        }

        TipoIdentificacion tipoIdentificacion = new TipoIdentificacion();

        tipoIdentificacion.setIdTipoIdentificacion( tipoIdentificacionEntity.getIdTipoIdentificacion() );
        tipoIdentificacion.setCodigoTipoIdentificacion( tipoIdentificacionEntity.getCodigoTipoIdentificacion() );
        tipoIdentificacion.setTipoIdentificacion( tipoIdentificacionEntity.getTipoIdentificacion() );

        return tipoIdentificacion;
    }

    protected Persona personaEntityToPersona(PersonaEntity personaEntity) {
        if ( personaEntity == null ) {
            return null;
        }

        Persona persona = new Persona();

        persona.setIdPersona( personaEntity.getIdPersona() );
        persona.setTipoIdentificacion( tipoIdentificacionEntityToTipoIdentificacion( personaEntity.getTipoIdentificacion() ) );
        persona.setNumeroIdentificacion( personaEntity.getNumeroIdentificacion() );
        persona.setPrimerNombre( personaEntity.getPrimerNombre() );
        persona.setSegundoNombre( personaEntity.getSegundoNombre() );
        persona.setPrimerApellido( personaEntity.getPrimerApellido() );
        persona.setSegundoApellido( personaEntity.getSegundoApellido() );
        persona.setEmail( personaEntity.getEmail() );
        persona.setSinReferencia( personaEntity.getSinReferencia() );

        return persona;
    }

    protected Docente docenteEntityToDocente(DocenteEntity docenteEntity) {
        if ( docenteEntity == null ) {
            return null;
        }

        Docente docente = new Docente();

        docente.setCodigo( docenteEntity.getCodigo() );
        docente.setCursos( cursoEntityListToCursoList( docenteEntity.getCursos() ) );
        docente.setEstado( docenteEntity.getEstado() );
        docente.setDepartamento( departamentoEntityToDepartamento( docenteEntity.getDepartamento() ) );
        docente.setPersona( personaEntityToPersona( docenteEntity.getPersona() ) );
        docente.setIdDocente( docenteEntity.getIdDocente() );

        return docente;
    }

    protected List<Docente> docenteEntityListToDocenteList(List<DocenteEntity> list) {
        if ( list == null ) {
            return null;
        }

        List<Docente> list1 = new ArrayList<Docente>( list.size() );
        for ( DocenteEntity docenteEntity : list ) {
            list1.add( docenteEntityToDocente( docenteEntity ) );
        }

        return list1;
    }

    protected PeriodoAcademico periodoAcademicoEntityToPeriodoAcademico(PeriodoAcademicoEntity periodoAcademicoEntity) {
        if ( periodoAcademicoEntity == null ) {
            return null;
        }

        PeriodoAcademico periodoAcademico = new PeriodoAcademico();

        periodoAcademico.setIdPeriodoAcademico( periodoAcademicoEntity.getIdPeriodoAcademico() );
        periodoAcademico.setAnio( periodoAcademicoEntity.getAnio() );
        periodoAcademico.setPeriodo( periodoAcademicoEntity.getPeriodo() );
        periodoAcademico.setFechaInicioPeriodo( periodoAcademicoEntity.getFechaInicioPeriodo() );
        periodoAcademico.setFechaFinPeriodo( periodoAcademicoEntity.getFechaFinPeriodo() );
        periodoAcademico.setEstado( periodoAcademicoEntity.getEstado() );

        return periodoAcademico;
    }

    protected TipoEspacioFisico tipoEspacioFisicoEntityToTipoEspacioFisico(TipoEspacioFisicoEntity tipoEspacioFisicoEntity) {
        if ( tipoEspacioFisicoEntity == null ) {
            return null;
        }

        TipoEspacioFisico tipoEspacioFisico = new TipoEspacioFisico();

        tipoEspacioFisico.setIdTipoEspacioFisico( tipoEspacioFisicoEntity.getIdTipoEspacioFisico() );
        tipoEspacioFisico.setTipo( tipoEspacioFisicoEntity.getTipo() );
        tipoEspacioFisico.setObservacion( tipoEspacioFisicoEntity.getObservacion() );

        return tipoEspacioFisico;
    }

    protected RecursoFisico recursoFisicoEntityToRecursoFisico(RecursoFisicoEntity recursoFisicoEntity) {
        if ( recursoFisicoEntity == null ) {
            return null;
        }

        RecursoFisico recursoFisico = new RecursoFisico();

        recursoFisico.setIdRecursoFisico( recursoFisicoEntity.getIdRecursoFisico() );
        recursoFisico.setNombre( recursoFisicoEntity.getNombre() );
        recursoFisico.setDescripcion( recursoFisicoEntity.getDescripcion() );

        return recursoFisico;
    }

    protected RecursoEspacioFisico recursoEspacioFisicoEntityToRecursoEspacioFisico(RecursoEspacioFisicoEntity recursoEspacioFisicoEntity) {
        if ( recursoEspacioFisicoEntity == null ) {
            return null;
        }

        RecursoEspacioFisico recursoEspacioFisico = new RecursoEspacioFisico();

        recursoEspacioFisico.setIdRecursoEspacioFisico( recursoEspacioFisicoEntity.getIdRecursoEspacioFisico() );
        recursoEspacioFisico.setEspacioFisico( espacioFisicoEntityToEspacioFisico( recursoEspacioFisicoEntity.getEspacioFisico() ) );
        recursoEspacioFisico.setRecursoFisico( recursoFisicoEntityToRecursoFisico( recursoEspacioFisicoEntity.getRecursoFisico() ) );
        recursoEspacioFisico.setCantidad( recursoEspacioFisicoEntity.getCantidad() );

        return recursoEspacioFisico;
    }

    protected List<RecursoEspacioFisico> recursoEspacioFisicoEntityListToRecursoEspacioFisicoList(List<RecursoEspacioFisicoEntity> list) {
        if ( list == null ) {
            return null;
        }

        List<RecursoEspacioFisico> list1 = new ArrayList<RecursoEspacioFisico>( list.size() );
        for ( RecursoEspacioFisicoEntity recursoEspacioFisicoEntity : list ) {
            list1.add( recursoEspacioFisicoEntityToRecursoEspacioFisico( recursoEspacioFisicoEntity ) );
        }

        return list1;
    }

    protected List<Horario> horarioEntityListToHorarioList(List<HorarioEntity> list) {
        if ( list == null ) {
            return null;
        }

        List<Horario> list1 = new ArrayList<Horario>( list.size() );
        for ( HorarioEntity horarioEntity : list ) {
            list1.add( horarioEntityToHorario( horarioEntity ) );
        }

        return list1;
    }

    protected Edificio edificioEntityToEdificio(EdificioEntity edificioEntity) {
        if ( edificioEntity == null ) {
            return null;
        }

        Edificio edificio = new Edificio();

        edificio.setIdEdificio( edificioEntity.getIdEdificio() );
        edificio.setNombre( edificioEntity.getNombre() );
        edificio.setDescripcion( edificioEntity.getDescripcion() );

        return edificio;
    }

    protected Municipio municipioEntityToMunicipio(MunicipioEntity municipioEntity) {
        if ( municipioEntity == null ) {
            return null;
        }

        Municipio municipio = new Municipio();

        municipio.setIdMunicipio( municipioEntity.getIdMunicipio() );
        municipio.setNombre( municipioEntity.getNombre() );

        return municipio;
    }

    protected Ubicacion ubicacionEntityToUbicacion(UbicacionEntity ubicacionEntity) {
        if ( ubicacionEntity == null ) {
            return null;
        }

        Ubicacion ubicacion = new Ubicacion();

        ubicacion.setIdUbicacion( ubicacionEntity.getIdUbicacion() );
        ubicacion.setNombre( ubicacionEntity.getNombre() );
        ubicacion.setDescripcion( ubicacionEntity.getDescripcion() );
        ubicacion.setMunicipio( municipioEntityToMunicipio( ubicacionEntity.getMunicipio() ) );

        return ubicacion;
    }

    protected EspacioFisico espacioFisicoEntityToEspacioFisico(EspacioFisicoEntity espacioFisicoEntity) {
        if ( espacioFisicoEntity == null ) {
            return null;
        }

        EspacioFisico espacioFisico = new EspacioFisico();

        espacioFisico.setIdEspacioFisico( espacioFisicoEntity.getIdEspacioFisico() );
        espacioFisico.setTipoEspacioFisico( tipoEspacioFisicoEntityToTipoEspacioFisico( espacioFisicoEntity.getTipoEspacioFisico() ) );
        espacioFisico.setSalon( espacioFisicoEntity.getSalon() );
        espacioFisico.setRecursosEspacioFisico( recursoEspacioFisicoEntityListToRecursoEspacioFisicoList( espacioFisicoEntity.getRecursosEspacioFisico() ) );
        espacioFisico.setCapacidad( espacioFisicoEntity.getCapacidad() );
        espacioFisico.setEstado( espacioFisicoEntity.getEstado() );
        espacioFisico.setHorarios( horarioEntityListToHorarioList( espacioFisicoEntity.getHorarios() ) );
        espacioFisico.setAgrupadores( agrupadorEspacioFisicoEntityListToAgrupadorEspacioFisicoList( espacioFisicoEntity.getAgrupadores() ) );
        espacioFisico.setEdificio( edificioEntityToEdificio( espacioFisicoEntity.getEdificio() ) );
        espacioFisico.setUbicacion( ubicacionEntityToUbicacion( espacioFisicoEntity.getUbicacion() ) );

        return espacioFisico;
    }

    protected List<EspacioFisico> espacioFisicoEntityListToEspacioFisicoList(List<EspacioFisicoEntity> list) {
        if ( list == null ) {
            return null;
        }

        List<EspacioFisico> list1 = new ArrayList<EspacioFisico>( list.size() );
        for ( EspacioFisicoEntity espacioFisicoEntity : list ) {
            list1.add( espacioFisicoEntityToEspacioFisico( espacioFisicoEntity ) );
        }

        return list1;
    }

    protected Horario horarioEntityToHorario(HorarioEntity horarioEntity) {
        if ( horarioEntity == null ) {
            return null;
        }

        Horario horario = new Horario();

        horario.setIdHorario( horarioEntity.getIdHorario() );
        horario.setDia( horarioEntity.getDia() );
        horario.setHoraInicio( horarioEntity.getHoraInicio() );
        horario.setHoraFin( horarioEntity.getHoraFin() );
        horario.setCurso( toCursoFromEntity( horarioEntity.getCurso() ) );
        horario.setEspaciosFisicos( espacioFisicoEntityListToEspacioFisicoList( horarioEntity.getEspaciosFisicos() ) );

        return horario;
    }

    protected void facultadToFacultadEntity1(Facultad facultad, FacultadEntity mappingTarget) {
        if ( facultad == null ) {
            return;
        }

        mappingTarget.setIdFacultad( facultad.getIdFacultad() );
        mappingTarget.setNombre( facultad.getNombre() );
        mappingTarget.setAbreviatura( facultad.getAbreviatura() );
    }

    protected List<AsignaturaEntity> asignaturaListToAsignaturaEntityList(List<Asignatura> list) {
        if ( list == null ) {
            return null;
        }

        List<AsignaturaEntity> list1 = new ArrayList<AsignaturaEntity>( list.size() );
        for ( Asignatura asignatura : list ) {
            list1.add( asignaturaToAsignaturaEntity1( asignatura ) );
        }

        return list1;
    }

    protected ProgramaEntity programaToProgramaEntity1(Programa programa) {
        if ( programa == null ) {
            return null;
        }

        ProgramaEntity programaEntity = new ProgramaEntity();

        programaEntity.setIdPrograma( programa.getIdPrograma() );
        programaEntity.setNombre( programa.getNombre() );
        programaEntity.setAbreviatura( programa.getAbreviatura() );
        programaEntity.setFacultad( facultadToFacultadEntity( programa.getFacultad() ) );
        programaEntity.setAsignaturas( asignaturaListToAsignaturaEntityList( programa.getAsignaturas() ) );
        if ( programa.getOid() != null ) {
            programaEntity.setOid( String.valueOf( programa.getOid() ) );
        }

        return programaEntity;
    }

    protected AsignaturaEntity asignaturaToAsignaturaEntity1(Asignatura asignatura) {
        if ( asignatura == null ) {
            return null;
        }

        AsignaturaEntity asignaturaEntity = new AsignaturaEntity();

        asignaturaEntity.setIdAsignatura( asignatura.getIdAsignatura() );
        asignaturaEntity.setNombre( asignatura.getNombre() );
        asignaturaEntity.setCodigoAsignatura( asignatura.getCodigoAsignatura() );
        asignaturaEntity.setSemestre( asignatura.getSemestre() );
        asignaturaEntity.setPensum( asignatura.getPensum() );
        asignaturaEntity.setHorasSemana( asignatura.getHorasSemana() );
        asignaturaEntity.setPrograma( programaToProgramaEntity1( asignatura.getPrograma() ) );
        asignaturaEntity.setAgrupadores( agrupadorEspacioFisicoListToAgrupadorEspacioFisicoEntityList( asignatura.getAgrupadores() ) );
        asignaturaEntity.setAplicaEspacioSecundario( asignatura.getAplicaEspacioSecundario() );

        return asignaturaEntity;
    }

    protected void programaToProgramaEntity1(Programa programa, ProgramaEntity mappingTarget) {
        if ( programa == null ) {
            return;
        }

        mappingTarget.setIdPrograma( programa.getIdPrograma() );
        mappingTarget.setNombre( programa.getNombre() );
        mappingTarget.setAbreviatura( programa.getAbreviatura() );
        if ( programa.getFacultad() != null ) {
            if ( mappingTarget.getFacultad() == null ) {
                mappingTarget.setFacultad( new FacultadEntity() );
            }
            facultadToFacultadEntity1( programa.getFacultad(), mappingTarget.getFacultad() );
        }
        else {
            mappingTarget.setFacultad( null );
        }
        if ( mappingTarget.getAsignaturas() != null ) {
            List<AsignaturaEntity> list = asignaturaListToAsignaturaEntityList( programa.getAsignaturas() );
            if ( list != null ) {
                mappingTarget.getAsignaturas().clear();
                mappingTarget.getAsignaturas().addAll( list );
            }
            else {
                mappingTarget.setAsignaturas( null );
            }
        }
        else {
            List<AsignaturaEntity> list = asignaturaListToAsignaturaEntityList( programa.getAsignaturas() );
            if ( list != null ) {
                mappingTarget.setAsignaturas( list );
            }
        }
        if ( programa.getOid() != null ) {
            mappingTarget.setOid( String.valueOf( programa.getOid() ) );
        }
        else {
            mappingTarget.setOid( null );
        }
    }

    protected void asignaturaToAsignaturaEntity1(Asignatura asignatura, AsignaturaEntity mappingTarget) {
        if ( asignatura == null ) {
            return;
        }

        mappingTarget.setIdAsignatura( asignatura.getIdAsignatura() );
        mappingTarget.setNombre( asignatura.getNombre() );
        mappingTarget.setCodigoAsignatura( asignatura.getCodigoAsignatura() );
        mappingTarget.setSemestre( asignatura.getSemestre() );
        mappingTarget.setPensum( asignatura.getPensum() );
        mappingTarget.setHorasSemana( asignatura.getHorasSemana() );
        if ( asignatura.getPrograma() != null ) {
            if ( mappingTarget.getPrograma() == null ) {
                mappingTarget.setPrograma( new ProgramaEntity() );
            }
            programaToProgramaEntity1( asignatura.getPrograma(), mappingTarget.getPrograma() );
        }
        else {
            mappingTarget.setPrograma( null );
        }
        if ( mappingTarget.getAgrupadores() != null ) {
            List<AgrupadorEspacioFisicoEntity> list = agrupadorEspacioFisicoListToAgrupadorEspacioFisicoEntityList( asignatura.getAgrupadores() );
            if ( list != null ) {
                mappingTarget.getAgrupadores().clear();
                mappingTarget.getAgrupadores().addAll( list );
            }
            else {
                mappingTarget.setAgrupadores( null );
            }
        }
        else {
            List<AgrupadorEspacioFisicoEntity> list = agrupadorEspacioFisicoListToAgrupadorEspacioFisicoEntityList( asignatura.getAgrupadores() );
            if ( list != null ) {
                mappingTarget.setAgrupadores( list );
            }
        }
        mappingTarget.setAplicaEspacioSecundario( asignatura.getAplicaEspacioSecundario() );
    }
}
