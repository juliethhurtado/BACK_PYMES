package co.edu.unicauca.sgph.gestionplanificacion.manual.infrastructure.input.mapper;

import co.edu.unicauca.sgph.asignatura.domain.model.Asignatura;
import co.edu.unicauca.sgph.curso.domain.model.Curso;
import co.edu.unicauca.sgph.curso.infrastructure.input.DTORequest.CursoInDTO;
import co.edu.unicauca.sgph.curso.infrastructure.input.DTOResponse.CursoOutDTO;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2024-12-26T16:49:02-0500",
    comments = "version: 1.5.5.Final, compiler: javac, environment: Java 17.0.7 (Eclipse Adoptium)"
)
@Component
public class PlanificacionManualRestMapperImpl implements PlanificacionManualRestMapper {

    @Override
    public CursoOutDTO toCursoOutDTO(Curso curso) {
        if ( curso == null ) {
            return null;
        }

        CursoOutDTO cursoOutDTO = new CursoOutDTO();

        cursoOutDTO.setIdAsignatura( cursoAsignaturaIdAsignatura( curso ) );
        cursoOutDTO.setIdCurso( curso.getIdCurso() );
        cursoOutDTO.setGrupo( curso.getGrupo() );
        cursoOutDTO.setCupo( curso.getCupo() );

        return cursoOutDTO;
    }

    @Override
    public Curso toCurso(CursoInDTO cursoInDTO) {
        if ( cursoInDTO == null ) {
            return null;
        }

        Curso curso = new Curso();

        curso.setIdCurso( cursoInDTO.getIdCurso() );
        curso.setGrupo( cursoInDTO.getGrupo() );
        curso.setCupo( cursoInDTO.getCupo() );

        curso.setAsignatura( new Asignatura(cursoInDTO.getIdAsignatura()) );

        return curso;
    }

    @Override
    public List<CursoOutDTO> toLstCursoOutDTO(List<Curso> lstCurso) {
        if ( lstCurso == null ) {
            return null;
        }

        List<CursoOutDTO> list = new ArrayList<CursoOutDTO>( lstCurso.size() );
        for ( Curso curso : lstCurso ) {
            list.add( toCursoOutDTO( curso ) );
        }

        return list;
    }

    private Long cursoAsignaturaIdAsignatura(Curso curso) {
        if ( curso == null ) {
            return null;
        }
        Asignatura asignatura = curso.getAsignatura();
        if ( asignatura == null ) {
            return null;
        }
        Long idAsignatura = asignatura.getIdAsignatura();
        if ( idAsignatura == null ) {
            return null;
        }
        return idAsignatura;
    }
}
