package co.edu.unicauca.sgph.departamento.infrastructure.input.mapper;

import co.edu.unicauca.sgph.departamento.domain.model.Departamento;
import co.edu.unicauca.sgph.departamento.infrastructure.input.DTORequest.DepartamentoInDTO;
import co.edu.unicauca.sgph.departamento.infrastructure.input.DTOResponse.DepartamentoOutDTO;
import co.edu.unicauca.sgph.facultad.domain.model.Facultad;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-08T12:25:08-0500",
    comments = "version: 1.5.5.Final, compiler: javac, environment: Java 17.0.7 (Eclipse Adoptium)"
)
@Component
public class DepartamentoRestMapperImpl implements DepartamentoRestMapper {

    @Override
    public DepartamentoOutDTO toDepartamentoOutDTO(Departamento departamento) {
        if ( departamento == null ) {
            return null;
        }

        DepartamentoOutDTO departamentoOutDTO = new DepartamentoOutDTO();

        departamentoOutDTO.setIdFacultad( departamentoFacultadIdFacultad( departamento ) );
        departamentoOutDTO.setIdDepartamento( departamento.getIdDepartamento() );
        departamentoOutDTO.setNombre( departamento.getNombre() );
        departamentoOutDTO.setOid( departamento.getOid() );

        return departamentoOutDTO;
    }

    @Override
    public Departamento toDepartamento(DepartamentoInDTO departamentoInDTO) {
        if ( departamentoInDTO == null ) {
            return null;
        }

        Departamento departamento = new Departamento();

        departamento.setIdDepartamento( departamentoInDTO.getIdDepartamento() );
        departamento.setNombre( departamentoInDTO.getNombre() );
        departamento.setOid( departamentoInDTO.getOid() );

        departamento.setFacultad( new Facultad(departamentoInDTO.getIdFacultad()) );

        return departamento;
    }

    @Override
    public List<DepartamentoOutDTO> toLstDepartamentoOutDTO(List<Departamento> lstDepartamento) {
        if ( lstDepartamento == null ) {
            return null;
        }

        List<DepartamentoOutDTO> list = new ArrayList<DepartamentoOutDTO>( lstDepartamento.size() );
        for ( Departamento departamento : lstDepartamento ) {
            list.add( toDepartamentoOutDTO( departamento ) );
        }

        return list;
    }

    private Long departamentoFacultadIdFacultad(Departamento departamento) {
        if ( departamento == null ) {
            return null;
        }
        Facultad facultad = departamento.getFacultad();
        if ( facultad == null ) {
            return null;
        }
        Long idFacultad = facultad.getIdFacultad();
        if ( idFacultad == null ) {
            return null;
        }
        return idFacultad;
    }
}
